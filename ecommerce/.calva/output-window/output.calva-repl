; This is the Calva evaluation results output window.
; TIPS: The keyboard shortcut `ctrl+alt+c o` shows and focuses this window
;   when connected to a REPL session.
; Please see https://calva.io/output/ for more info.
; Happy coding! ♥️

; Jacking in...
; Starting Jack-in Terminal: lein update-in :dependencies conj '[nrepl,"0.8.3"]' -- update-in :plugins conj '[cider/cider-nrepl,"0.25.11"]' -- update-in '[:repl-options,:nrepl-middleware]' conj '["cider.nrepl/cider-middleware"]' -- repl :headless
; Hooking up nREPL sessions...
; Connected session: clj
; TIPS: 
;   - You can edit the contents here. Use it as a REPL if you like.
;   - `alt+enter` evaluates the current top level form.
;   - `ctrl+enter` evaluates the current form.
;   - `alt+up` and `alt+down` traverse up and down the REPL command history
;      when the cursor is after the last contents at the prompt
;   - Clojure lines in stack traces are peekable and clickable.
clj꞉ecommerce.core꞉>  ; Use `alt+enter` to evaluate
; Jack-in done.
clj꞉ecommerce.core꞉> 
(require '[datomic.api :as d])
nil
clj꞉ecommerce.core꞉> 
(def db-uri "datomic:dev://localhost:4334/hello")
#'repl/db-uri
clj꞉repl꞉>  (d/create-database db-uri)
; Syntax error compiling at (output.calva-repl:26:12).
; No such namespace: d
clj꞉repl꞉> 
(datomic.api/create-database db-uri)
; Execution error (Exceptions$IllegalArgumentExceptionInfo) at datomic.error/arg (error.clj:79).
; :db.error/read-transactor-location-failed Could not read transactor location from storage
clj꞉repl꞉> 
; Execution error (Exceptions$IllegalArgumentExceptionInfo) at datomic.error/arg (error.clj:79).
; :db.error/read-transactor-location-failed Could not read transactor location from storage
clj꞉repl꞉> 
(datomic.api/create-database db-uri)
true
clj꞉repl꞉> 
(require '[ecommerce.db])
nil
clj꞉repl꞉> 
(require '[ecommerce.model])
nil
clj꞉repl꞉> 
(def conn (db/open-connection))
; Syntax error compiling at (output.calva-repl:46:11).
; No such namespace: db
clj꞉repl꞉> 
(require '[ecommerce.db])
(require '[ecommerce.model])
(require '[ecommerce.db :as db])
(require '[datomic.api :as d])
(require '[ecommerce.model :as model])
nil
clj꞉repl꞉> 
nil
clj꞉repl꞉> 
nil
clj꞉repl꞉> 
nil
clj꞉repl꞉> 
nil
clj꞉repl꞉> 
nil
clj꞉repl꞉> 
(def conn (db/open-connection))
#'repl/conn
clj꞉repl꞉> 
(d/transact conn db/schema)
#<promise$settable_future$reify__6969@e812a6: 
  {:db-before datomic.db.Db@770decad,
   :db-after datomic.db.Db@5cf54df3,
   :tx-data [#datom[13194139534315 50 #inst "2021-05-01T20:14:25.604-00:00" 13194139534315 true]],
   :tempids {-9223301668109598143 72, -9223301668109598142 73, -9223301668109598141 74}}>
clj꞉repl꞉> 
(def computer (model/new-product "New Computer", "/new_computer", 2500.10M))
#'repl/computer
clj꞉repl꞉> 
(d/transact conn [computer])
#<promise$settable_future$reify__6969@322b5920: 
  {:db-before datomic.db.Db@5cf54df3,
   :db-after datomic.db.Db@31420585,
   :tx-data
   [#datom[13194139534316 50 #inst "2021-05-01T20:14:45.976-00:00" 13194139534316 true] #datom[17592186045421 72 "New Computer" 13194139534316 true] #datom[17592186045421 73 "/new_computer" 13194139534316 true] #datom[17592186045421 74 2500.10M 13194139534316 true]],
   :tempids {-9223301668109598140 17592186045421}}>
clj꞉repl꞉> 
(def computer1 (model/new-product "New Computer1", "/new_computer1", 2500.10M))
#'repl/computer1
clj꞉repl꞉> 
(d/transact conn [computer computer1])
#<promise$settable_future$reify__6969@115087bd: 
  {:db-before datomic.db.Db@31420585,
   :db-after datomic.db.Db@745c1660,
   :tx-data
   [#datom[13194139534318 50 #inst "2021-05-01T20:16:19.156-00:00" 13194139534318 true] #datom[17592186045423 72 "New Computer" 13194139534318 true] #datom[17592186045423 73 "/new_computer" 13194139534318 true] #datom[17592186045423 74 2500.10M 13194139534318 true] #datom[17592186045424 72 "New Computer1" 13194139534318 true] #datom[17592186045424 73 "/new_computer1" 13194139534318 true] #datom[17592186045424 74 2500.10M 13194139534318 true]],
   :tempids {-9223301668109598139 17592186045423, -9223301668109598138 17592186045424}}>
clj꞉repl꞉> 
(def computer1 (model/new-product "New Computer1", "/new_computer1", 2500.10M))
(def computer2 (model/new-product "New Computer2", "/new_computer2", 2500.20M))
#'repl/computer2
clj꞉repl꞉> 
(d/transact conn [computer1 computer2])
#<promise$settable_future$reify__6969@782caa18: 
  {:db-before datomic.db.Db@745c1660,
   :db-after datomic.db.Db@b8feac45,
   :tx-data
   [#datom[13194139534321 50 #inst "2021-05-01T20:17:10.289-00:00" 13194139534321 true] #datom[17592186045426 72 "New Computer1" 13194139534321 true] #datom[17592186045426 73 "/new_computer1" 13194139534321 true] #datom[17592186045426 74 2500.10M 13194139534321 true] #datom[17592186045427 72 "New Computer2" 13194139534321 true] #datom[17592186045427 73 "/new_computer2" 13194139534321 true] #datom[17592186045427 74 2500.20M 13194139534321 true]],
   :tempids {-9223301668109598137 17592186045426, -9223301668109598136 17592186045427}}>
clj꞉repl꞉> 
(d/transact conn db/schema)
#<promise$settable_future$reify__6969@117622b2: 
  {:db-before datomic.db.Db@b8feac45,
   :db-after datomic.db.Db@75816b22,
   :tx-data [#datom[13194139534324 50 #inst "2021-05-01T20:23:07.052-00:00" 13194139534324 true]],
   :tempids {-9223301668109598135 72, -9223301668109598134 73, -9223301668109598133 74}}>
clj꞉repl꞉> 
